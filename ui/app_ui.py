import sys
import time
from PyQt5.QtWidgets import (
    QApplication, QWidget, QPushButton, QLabel,
    QFileDialog, QVBoxLayout, QSpinBox, QLineEdit, QMessageBox, QTextEdit
)
from processor.traffic_processor import TrafficProcessor
from config_manager import load_config, save_config


def run_ui():
    app = QApplication(sys.argv)
    window = TrafficApp()
    window.show()
    sys.exit(app.exec_())


class TrafficApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Traffic Detection UI')
        self.setGeometry(100, 100, 500, 400)
        self.config = load_config()
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout()

        self.video_path = QLineEdit(self.config.get("video_path", ""))
        layout.addWidget(QLabel("üé• –í—ñ–¥–µ–æ —Ñ–∞–π–ª:"))
        layout.addWidget(self.video_path)
        video_btn = QPushButton("–û–±—Ä–∞—Ç–∏ –≤—ñ–¥–µ–æ")
        video_btn.clicked.connect(self.select_video)
        layout.addWidget(video_btn)

        self.model_path = QLineEdit(self.config.get("yolo_model_path", ""))
        layout.addWidget(QLabel("üß† –ú–æ–¥–µ–ª—å YOLO:"))
        layout.addWidget(self.model_path)
        model_btn = QPushButton("–û–±—Ä–∞—Ç–∏ –º–æ–¥–µ–ª—å")
        model_btn.clicked.connect(self.select_model)
        layout.addWidget(model_btn)

        self.output_path = QLineEdit(self.config.get("output_folder", ""))
        layout.addWidget(QLabel("üìÇ –í–∏—Ö—ñ–¥–Ω–∞ –ø–∞–ø–∫–∞:"))
        layout.addWidget(self.output_path)
        output_btn = QPushButton("–û–±—Ä–∞—Ç–∏ –ø–∞–ø–∫—É")
        output_btn.clicked.connect(self.select_output)
        layout.addWidget(output_btn)

        layout.addWidget(QLabel("‚è± –î–æ–≤–∂–∏–Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ (—Å–µ–∫):"))
        self.segment_spin = QSpinBox()
        self.segment_spin.setValue(self.config.get("segment_length_sec", 30))
        self.segment_spin.setMinimum(5)
        layout.addWidget(self.segment_spin)

        self.run_btn = QPushButton("‚ñ∂ –°—Ç–∞—Ä—Ç –æ–±—Ä–æ–±–∫–∏")
        self.run_btn.clicked.connect(self.run_processing)
        layout.addWidget(self.run_btn)

        self.status = QLabel("üü¢ –ì–æ—Ç–æ–≤–æ –¥–æ —Ä–æ–±–æ—Ç–∏")
        layout.addWidget(self.status)

        self.log_box = QTextEdit()
        self.log_box.setReadOnly(True)
        layout.addWidget(self.log_box)

        self.setLayout(layout)

    def select_video(self):
        path, _ = QFileDialog.getOpenFileName(self, "–û–±—Ä–∞—Ç–∏ –≤—ñ–¥–µ–æ", "", "–í—ñ–¥–µ–æ (*.mp4 *.avi *.mkv)")
        if path:
            self.video_path.setText(path)

    def select_model(self):
        path, _ = QFileDialog.getOpenFileName(self, "–û–±—Ä–∞—Ç–∏ –º–æ–¥–µ–ª—å", "", "*.pt")
        if path:
            self.model_path.setText(path)

    def select_output(self):
        path = QFileDialog.getExistingDirectory(self, "–û–±—Ä–∞—Ç–∏ –ø–∞–ø–∫—É")
        if path:
            self.output_path.setText(path)

    def run_processing(self):
        video = self.video_path.text()
        model = self.model_path.text()
        output = self.output_path.text()
        segment = self.segment_spin.value()

        if not all([video, model, output]):
            QMessageBox.warning(self, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞", "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è!")
            return

        self.status.setText("üîÑ –û–±—Ä–æ–±–∫–∞...")
        QApplication.processEvents()

        self.config.update({
            "video_path": video,
            "yolo_model_path": model,
            "output_folder": output,
            "segment_length_sec": segment
        })
        save_config(self.config)

        try:
            start = time.time()
            processor = TrafficProcessor(**self.config)
            summary = processor.process()

            result_lines = []
            for segment_idx, class_counts in summary:
                parts = [f"{cls}: {cnt}" for cls, cnt in class_counts.items()]
                line = f"üì¶ –°–µ–≥–º–µ–Ω—Ç {segment_idx}: " + ", ".join(parts)
                result_lines.append(line)

            self.log_box.setText("\n".join(result_lines))
            end = time.time()
            self.status.setText(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {end - start:.1f} —Å")
        except Exception as e:
            self.status.setText("‚ùå –ü–æ–º–∏–ª–∫–∞")
            QMessageBox.critical(self, "‚ùå –ü–æ–º–∏–ª–∫–∞", str(e))
